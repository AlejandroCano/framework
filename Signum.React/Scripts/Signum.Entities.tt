<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".ts" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="$(ProjectDir)..\Signum.T4\bin\Debug\Signum.T4.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Signum.T4" #>
<#= EntityDeclarationGenerator.Process(new Options
{
	ProjectFile = this.Host.ResolvePath(@"..\..\Signum.Entities\Signum.Entities.csproj"), 
	BaseNamespace = "Signum.Entities",
})
 #>
export interface ModifiableEntity
{
    ToString?: string;
}

export interface IEntity
{
    Type?: string;
    id?: any;
    isNew?: boolean;
    ticks?: number;
	ToString? : string;
}

export interface Entity extends ModifiableEntity, IEntity
{
    mixins?: { [name: string]: MixinEntity }
}
    
export interface MixinEntity extends ModifiableEntity{
}

export type MList<T> = Array<MListElement<T>>;

export interface MListElement<T> {
    rowId?: any;
    element?: T;
}

export interface Lite<T> {
    entity?: T;
    _type?: string;
    id?: any;
    ToString?: string;
}

export type Type<T extends ModifiableEntity> = string;

export type ExecuteSymbol<T extends IEntity> = OperationSymbol; 
export type DeleteSymbol<T extends IEntity> = OperationSymbol; 
export type ConstructSymbol_Simple<T extends Entity> = OperationSymbol; 
export type ConstructSymbol_From<T extends Entity, F extends IEntity> = OperationSymbol; 
export type ConstructSymbol_FromMany<T extends Entity, F extends IEntity> = OperationSymbol; 



