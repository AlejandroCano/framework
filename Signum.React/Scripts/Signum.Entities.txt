//Assembly: Signum.Entities.dll
//BaseNamespace: Signum.Entities

import { MessageKey, QueryKey, Type, EnumType, registerSymbol } from 'Framework/Signum.React/Scripts/Reflection' 

export interface ModifiableEntity {
    ToString?: string;
}

export interface IEntity {
    Type?: string;
    id?: any;
    isNew?: boolean;
    ticks?: number;
    toStr?: string;
}

export interface Entity extends ModifiableEntity, IEntity {
    mixins?: { [name: string]: MixinEntity }
}

export interface MixinEntity extends ModifiableEntity {
}

export type MList<T> = Array<MListElement<T>>;

export interface MListElement<T> {
    rowId?: any;
    element?: T;
}

export interface Lite<T extends IEntity> {
    entity?: T;
    EntityType?: string;
    id?: any;
    toStr?: string;
}

export type Type<T extends ModifiableEntity> = string;

export type ExecuteSymbol<T extends IEntity> = OperationSymbol;
export type DeleteSymbol<T extends IEntity> = OperationSymbol;
export type ConstructSymbol_Simple<T extends Entity> = OperationSymbol;
export type ConstructSymbol_From<T extends Entity, F extends IEntity> = OperationSymbol;
export type ConstructSymbol_FromMany<T extends Entity, F extends IEntity> = OperationSymbol; 

