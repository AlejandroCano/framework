//Assembly: Signum.Entities.dll

import { MessageKey, QueryKey, Type, EnumType, registerSymbol } from './Reflection' 

export interface ModifiableEntity {
    Type: string;
    toStr?: string;	
    modified? : boolean;
    isNew?: boolean;
	error?: { [member: string]: string };
}

export interface IEntity {
    Type: string;
    id?: any;
    ticks?: string; //max value
    toStr?: string;
    modified? : boolean;
}

export interface Entity extends ModifiableEntity, IEntity {
    mixins?: { [name: string]: MixinEntity }
}

export interface MixinEntity extends ModifiableEntity {
}

export function getMixin<M extends MixinEntity>(entity: Entity, type: Type<M>) {
    return entity.mixins[type.typeName] as M;
}

export type MList<T> = Array<MListElement<T>>;

export interface MListElement<T> {
    element: T;
    rowId?: any;
}

export interface Lite<T extends IEntity> {
    entity?: T;
    EntityType: string;
    id?: any;
    toStr?: string;
}

export interface ModelState {
    [field: string]: string;
}

export interface EntityPack<T extends ModifiableEntity> {
    entity: T
    canExecute: { [key: string]: string };
}



//The interfaces add no real members, they are there just to force TS structural typing

export interface ExecuteSymbol<T extends IEntity> extends OperationSymbol { _execute_?: T /*TRICK*/ };
export interface DeleteSymbol<T extends IEntity> extends OperationSymbol { _delete_?: T /*TRICK*/ };
export interface ConstructSymbol_Simple<T extends Entity> extends OperationSymbol { _construct_?: T /*TRICK*/ };
export interface ConstructSymbol_From<T extends Entity, F extends IEntity> extends OperationSymbol { _constructFrom_?: T, _from_?: F /*TRICK*/ };
export interface ConstructSymbol_FromMany<T extends Entity, F extends IEntity> extends OperationSymbol {  _constructFromMany_?: T, _from_?: F /*TRICK*/ };

export var toStringDictionary: { [name: string]: (entity: ModifiableEntity) => string } = {};

export function registerToString<T extends ModifiableEntity>(type: Type<T>, toStringFunc: (e: T) => string) {
    toStringDictionary[type.typeName] = toStringFunc;
}


import { getTypeInfo } from './Reflection' 
function geOrCreateToStringFunction(type: string) {
    var f = toStringDictionary[type];
    if (f != null || f === null)
        return f; 

    var ti = getTypeInfo(type);

    try {
        f = ti && ti.toStringFunction ? eval("(" + ti.toStringFunction + ")") : null;
    } catch (e) {
        f = null;
    }

    toStringDictionary[type] = f;

    return f;
}

export function getToString(entityOrLite: ModifiableEntity | Lite<Entity>) 
{
    if (entityOrLite == null)
        return null;

    var lite = entityOrLite as Lite<Entity>;
    if (lite.EntityType) 
        return lite.entity ? getToString(lite.entity) : lite.toStr;

    var entity = entityOrLite as ModifiableEntity;
    var toStr = geOrCreateToStringFunction(entity.Type);
    if (toStr)
        return toStr(entity);

    return entity.toStr || entity.Type;
}

export function toLite<T extends IEntity>(entity: T, fat?: boolean) : Lite<T> {

    if(entity == null)
        return null;

    if(fat)
       return toLiteFat(entity);

    if(!entity.id)
        throw new Error(`The ${entity.Type} has no Id`);

    return {
       EntityType : entity.Type,
       id: entity.id,
       toStr: getToString(entity),
    }
}

export function toLiteFat<T extends IEntity>(entity: T) : Lite<T> {
    
    if(entity == null)
        return null;
    
    return {
       entity : entity,
       EntityType  :entity.Type,
       id: entity.id,
       toStr: getToString(entity),
    }
}

export function liteKey(lite: Lite<IEntity>) {
    
    if(lite == null)
        return null;
    
    return lite.EntityType + ";" + (lite.id || "");
}

export function parseLite(lite: string) : Lite<IEntity> {
    return {
        EntityType: lite.before(";"),
        id :  lite.after(";"),
    };
}

export function is<T extends IEntity>(a: Lite<T> | T, b: Lite<T> | T) {

    if(a == null && b == null)
        return true;
		
    if(a == null || b == null)
        return false;

    var aType = (a as T).Type || (a as Lite<T>).EntityType;
    var bType = (a as T).Type || (a as Lite<T>).EntityType;

	if(!aType || !bType)
		throw new Error("No Type found");

    if (aType != bType)
        return false;

    if (a.id != null || b.id != null)
        return a.id == b.id;

    var aEntity = (a as T).Type ? a as T : (a as Lite<T>).entity;
    var bEntity = (b as T).Type ? b as T : (b as Lite<T>).entity;
    
    return aEntity == bEntity;
}


