//Assembly: Signum.Entities.dll

import { MessageKey, QueryKey, Type, EnumType, registerSymbol } from 'Framework/Signum.React/Scripts/Reflection' 

export interface ModifiableEntity {
    Type: string;
    toStr?: string;
}

export interface IEntity {
    Type: string;
    id?: any;
    isNew?: boolean;
    ticks?: number;
    toStr?: string;
}

export interface Entity extends ModifiableEntity, IEntity {
    mixins?: { [name: string]: MixinEntity }
}

export interface MixinEntity extends ModifiableEntity {
}

export function getMixin<M extends MixinEntity>(entity: Entity, type: Type<M>) {
    return entity.mixins[type.typeName] as M;
}

export type MList<T> = Array<MListElement<T>>;

export interface MListElement<T> {
    rowId?: any;
    element?: T;
}

export interface Lite<T extends IEntity> {
    entity?: T;
    EntityType: string;
    id?: any;
    toStr?: string;
}

export type Type<T extends ModifiableEntity> = string;

export type ExecuteSymbol<T extends IEntity> = OperationSymbol;
export type DeleteSymbol<T extends IEntity> = OperationSymbol;
export type ConstructSymbol_Simple<T extends Entity> = OperationSymbol;
export type ConstructSymbol_From<T extends Entity, F extends IEntity> = OperationSymbol;
export type ConstructSymbol_FromMany<T extends Entity, F extends IEntity> = OperationSymbol; 

export function toLite<T extends IEntity>(entity: T) : Lite<T> {
    return {
       EntityType : entity.Type,
       id :entity.id,
       toStr :entity.toStr,
    }
}

export function toLiteFat<T extends IEntity>(entity: T) : Lite<T> {
    return {
       entity : entity,
       EntityType  :entity.Type,
       id :entity.id,
       toStr :entity.toStr,
    }
}

export function liteKey(lite: Lite<IEntity>) {
    return lite.EntityType + ";" + (lite.id || "");
}

export function parseLite(lite: string) : Lite<IEntity> {
    return {
        EntityType: lite.before(";"),
        id :  lite.after(";"),
    };
}

import { getTypeInfo } from 'Framework/Signum.React/Scripts/Reflection' 
export function is<T extends IEntity>(a: Lite<T> | T, b: Lite<T> | T) {

    if (a.id != b.id)
        return false;

    var aType = getTypeInfo((a as T).Type || (a as Lite<T>).EntityType);
    var bType = getTypeInfo((a as T).Type || (a as Lite<T>).EntityType);

    return aType == bType;
}

