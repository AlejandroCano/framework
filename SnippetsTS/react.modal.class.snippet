<CodeSnippet Format="1.1.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>Signum Modal Pop-up Class Component</Title>
    <Author>Signum Software</Author>
    <Shortcut>reactModal</Shortcut>
    <Description>Code snippet for adding an Modal Pop-up React class</Description>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Imports>
      <Import>
        <Namespace>
          import { Modal } from "react-bootstrap";
          import { openModal, IModalProps } from "../../../../Framework/Signum.React/Scripts/Modals";
        </Namespace>
      </Import>
    </Imports>
    <Declarations>
      <Literal>
        <ID>ComponentName</ID>
        <ToolTip>Component Class Name</ToolTip>
        <Default>MyComponent</Default>
      </Literal>
      <Literal>
        <ID>AnswerType</ID>
        <ToolTip>Type of item returned by popup</ToolTip>
        <Default>boolean</Default>
      </Literal>
    </Declarations>
    <Code Language="TypeScript">
      <![CDATA[
interface $ComponentName$ModalProps extends IModalProps {
  question: string;
}

interface $ComponentName$ModalState {
  show: boolean;
}

class $ComponentName$Modal extends React.Component<$ComponentName$ModalProps, $ComponentName$ModalState> {

  constructor(props: $ComponentName$ModalProps) {
    super(props);
    this.state = { show: true };
  }

  answer?: $AnswerType$;
  handleOkClicked = (val: $AnswerType$) => {
    this.answer = val;
    this.setState({ show: false });
  }

  handleCancelClicked = () => {
    this.setState({ show: false });
  }

  handleOnExited = () => {
    this.props.onExited!(this.answer);
  }

  render() {
    return (
      <Modal onHide={this.handleCancelClicked} show={this.state.show} className="message-modal" onExited={this.handleOnExited}>
        <div className="modal-header">
          <h5 className="modal-title">Important Question</h5>
          <button type="button" className="close" data-dismiss="modal" aria-label="Close" onClick={this.handleCancelClicked}>
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div className="modal-body">
          {this.props.question}
        </div>
        <div className="modal-footer">
          <button className="btn btn-primary sf-entity-button sf-ok-button" onClick={this.handleOkClicked}>
            {JavascriptMessage.ok.niceToString()}
          </button>
          <button className="btn btn-light sf-entity-button sf-close-button" onClick={this.handleCancelClicked}>
            {JavascriptMessage.cancel.niceToString()}
          </button>
        </div>
      </Modal>
    );
  }

  static show(question: string): Promise<$AnswerType$ | undefined> {
    return openModal<$AnswerType$ | undefined>(<$ComponentName$Modal question={question} />);
  }
}]]>
    </Code>
  </Snippet>
</CodeSnippet>
